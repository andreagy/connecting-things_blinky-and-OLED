#include <cstdio>
#include "pico/stdlib.h"
#include "hardware/pwm.h"
#include <cmath>
#include "pico/time.h"
#include "hardware/timer.h"
#include "ssd1306.h"

//Pin definitions
#define LED1_PIN 22
#define LED2_PIN 21
#define LED3_PIN 20

#define USE_SSD1306

// Image bitmaps
static const unsigned char cat[] = {
        // font edit begin : monovlsb : 39 : 39 : 39
        0x00, 0x00, 0x80, 0xE0, 0x30, 0x18, 0x18, 0x30,
        0x60, 0xC0, 0xC0, 0xC0, 0xC0, 0x40, 0x30, 0x18,
        0x18, 0x70, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00,
        0xFC, 0x07, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00,
        0x40, 0x61, 0x61, 0x40, 0x00, 0x00, 0x30, 0x30,
        0x00, 0x01, 0x03, 0x1E, 0x20, 0xE0, 0xE0, 0x20,
        0x20, 0xE0, 0xE0, 0x20, 0x60, 0x46, 0xC9, 0x88,
        0x98, 0xF0, 0x00, 0x03, 0xFE, 0x00, 0x00, 0x01,
        0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07,
        0xF0, 0x18, 0x0E, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x03, 0x06, 0x0C, 0x18, 0xF0, 0x00, 0x00, 0xE0,
        0x20, 0x20, 0xE0, 0x00, 0x00, 0xC0, 0x20, 0x20,
        0x20, 0x20, 0xE0, 0x00, 0x00, 0xE0, 0x20, 0xE0,
        0x00, 0x00, 0xE0, 0x30, 0x18, 0x0C, 0x06, 0x03,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00
        // font edit end
};

static const unsigned char cat2[] = {
        // font edit begin : monovlsb : 39 : 39 : 39
        0x00, 0x00, 0x80, 0xE0, 0x30, 0x18, 0x18, 0x30,
        0x60, 0xC0, 0xC0, 0xC0, 0xC0, 0x40, 0x30, 0x18,
        0x18, 0x70, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x80, 0xC0, 0x20, 0x10, 0x30, 0xE0, 0x00,
        0xFC, 0x07, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00,
        0x40, 0x61, 0x61, 0x40, 0x00, 0x00, 0x30, 0x30,
        0x00, 0x01, 0x03, 0x1E, 0x20, 0xE0, 0xE0, 0x20,
        0x20, 0xE0, 0xE0, 0x20, 0x60, 0x40, 0xC0, 0x80,
        0x9F, 0xF0, 0x00, 0x00, 0xFF, 0x01, 0x00, 0x01,
        0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07,
        0xF0, 0x18, 0x0E, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x03, 0x06, 0x0C, 0x18, 0xF0, 0x00, 0x00, 0xE0,
        0x20, 0x20, 0xE0, 0x00, 0x00, 0xC0, 0x20, 0x20,
        0x20, 0x20, 0xE0, 0x00, 0x00, 0xE0, 0x20, 0xE0,
        0x00, 0x00, 0xE0, 0x30, 0x18, 0x0C, 0x06, 0x03,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00
        // font edit end
};


volatile bool ledTimerFired = false;

void create_led(uint led) {
    uint period, freq;
    period = 1000;
    freq = 125; //Division of 125MHz / 1MHz
    uint slice_num = pwm_gpio_to_slice_num(led);
    pwm_config config_led = pwm_get_default_config();
    pwm_config_set_clkdiv_int(&config_led, freq);
    pwm_config_set_wrap(&config_led, period - 1); //Set the PWM period
    pwm_set_enabled(slice_num, led);
    pwm_init(slice_num, &config_led, true);
    gpio_set_function(led, GPIO_FUNC_PWM);
}

void adjust_bright(uint led, int bright){
    uint slice, channel;
    slice = pwm_gpio_to_slice_num(led);
    channel = pwm_gpio_to_channel(led);
    pwm_set_chan_level(slice,channel,bright);
}

// Timer for slow LED blink
bool timer_callback(repeating_timer_t *timer) {
    ledTimerFired = true;
    return true; // keep repeating
}


int main() {

    // Initialize LED pins
    create_led(LED1_PIN); //D1
    create_led(LED2_PIN); //D2
    create_led(LED3_PIN); //D3

    // Initialize chosen serial port
    stdio_init_all();

    // Create the timer
    repeating_timer_t timer;
    //Set it to 1Hz
    if (!add_repeating_timer_us(250000, timer_callback, nullptr, &timer)) {
        printf("Failed to add timer\n");
        return 1;
    }

    // Initialize OLED
#ifdef USE_SSD1306
    i2c_init(i2c1, 400 * 1000);
    gpio_set_function(14, GPIO_FUNC_I2C); // the display has external pull-ups
    gpio_set_function(15, GPIO_FUNC_I2C); // the display has external pull-ups
    i2c_init(i2c0, 100 * 1000); // EEPROM
    gpio_set_function(16, GPIO_FUNC_I2C);
    gpio_set_function(17, GPIO_FUNC_I2C);
    gpio_pull_up(16);
    gpio_pull_up(17);
    ssd1306 display(i2c1);
#endif

    int count = 0;
    int ledState;

    while (true) {
        // Blink LEDs
        if (ledTimerFired) {

            //led1
            ledState = 0b001 & (count %8);
            if (ledState) {
                adjust_bright(LED1_PIN, 50);
            } else {
                adjust_bright(LED1_PIN, 0);
            }

            //led2
            ledState = 0b010 & (count %8);
            if (ledState) {
                adjust_bright(LED2_PIN, 50);
            } else {
                adjust_bright(LED2_PIN, 0);
            }

            //led3
            ledState = 0b100 & (count %8);
            if (ledState) {
                adjust_bright(LED3_PIN, 50);
            } else {
                adjust_bright(LED3_PIN, 0);
            }

            ledTimerFired = false; // Reset timer flag
            count++;

            // Print to console and OLED
            char timeString[10];
            sprintf(timeString, "Time: %ds", count/4);
            if (count%4 == 0) {
                printf("Time: %ds\n", (int)count/4);
                display.fill(0);
                display.text(timeString, 0, 0);
                mono_vlsb rb(cat, 39, 39);
                display.blit(rb, 20, 20);
                display.show();
            } else if (count%2 == 0) {
                display.fill(0);
                display.text(timeString, 0, 0);
                mono_vlsb rb(cat2, 39, 39);
                display.blit(rb, 20, 20);
                display.show();
            } else if (count%3 == 0) {

            }

        }
    }
}
